name: CI

on:
  pull_request:
    paths:
      - "src/**"
      - "include/**"
      - "meson.build"
      - "meson_options.txt"
      - "bindings/**"
      - ".github/workflows/**"
  push:
    branches: [main]
    tags: ['v*']
    paths:
      - "src/**"
      - "include/**"
      - "meson.build"
      - "meson_options.txt"
      - "bindings/**"
      - ".github/workflows/**"
  workflow_dispatch: {}   # 👈 this adds “Run workflow” in the Actions UI


concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      # Linux cache
      - name: Cache (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.cache/ccache
            $HOME/.cache/meson
          key: linux-${{ hashFiles('**/meson.build','**/meson_options.txt') }}
          restore-keys: linux-

      # macOS cache
      - name: Cache (macOS)
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.cache/ccache
            $HOME/.cache/meson
          key: mac-${{ hashFiles('**/meson.build','**/meson_options.txt') }}
          restore-keys: mac-

      # Windows cache
      - name: Cache (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\.ccache
            C:\Users\runneradmin\AppData\Local\meson
          key: win-${{ hashFiles('**/meson.build','**/meson_options.txt') }}
          restore-keys: win-

      - name: Linux deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y meson ninja-build pkg-config gcc g++ ccache \
            libglib2.0-dev libusb-1.0-0-dev libzip-dev libftdi1-dev libserialport-dev libhidapi-dev libieee1284-3-dev
          echo "/usr/lib/ccache" >> "$GITHUB_PATH"
          mkdir -p "$HOME/.cache/ccache" "$HOME/.cache/meson"

      - name: macOS deps
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install meson ninja pkg-config ccache glib libusb libzip libftdi hidapi libserialport
          echo "$(brew --prefix ccache)/libexec" >> "$GITHUB_PATH"
          echo "XDG_CACHE_HOME=$HOME/.cache"   >> "$GITHUB_ENV"
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> "$GITHUB_ENV"
          mkdir -p "$HOME/.cache/ccache" "$HOME/.cache/meson"

      - name: MSYS2 setup
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-ccache
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-libusb
            mingw-w64-x86_64-libzip
            mingw-w64-x86_64-libftdi
            mingw-w64-x86_64-libserialport
            mingw-w64-x86_64-hidapi

      - name: Build & test (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            PREFIX=/usr/local
          else
            PREFIX=/usr
          fi
          meson setup build --buildtype=release -Dembed_git_suffix=true --prefix=$PREFIX
          meson configure build
          meson compile -C build
          meson test -C build --print-errorlogs

      - name: Build & test (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          # Use the GitHub-Windows cache paths so the cache action can see them
          export CCACHE_DIR=/c/Users/runneradmin/.ccache
          export XDG_CACHE_HOME=/c/Users/runneradmin/AppData/Local
          mkdir -p "$CCACHE_DIR"
          meson setup build --buildtype=release -Dembed_git_suffix=true
          meson configure build
          meson compile -C build
          meson test -C build --print-errorlogs
      - name: Install (Linux/macOS)
        if: runner.os != 'Windows' && startsWith(github.ref, 'refs/tags/v')
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            PREFIX=/usr/local
          else
            PREFIX=/usr
          fi
          DESTDIR="${PWD}/install" meson install -C build
          tar czf opentracecapture-${{ runner.os == 'macOS' && 'macos' || 'linux' }}.tar.gz -C install$PREFIX .

      - name: Install (Windows)
        if: runner.os == 'Windows' && startsWith(github.ref, 'refs/tags/v')
        shell: msys2 {0}
        run: |
          DESTDIR="${PWD}/install" meson install -C build
          MINGW_PATH=$(find install -type d -name mingw64 | head -1)
          tar czf opentracecapture-windows.tar.gz -C $MINGW_PATH .

      - name: Upload artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: opentracecapture-${{ runner.os == 'macOS' && 'macos' || runner.os == 'Windows' && 'windows' || 'linux' }}
          path: opentracecapture-*.tar.gz

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/opentracecapture-*.tar.gz
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
