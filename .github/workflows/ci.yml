name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Linux/macOS deps
        if: runner.os != 'Windows'
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y ninja-build meson pkg-config \
              libglib2.0-dev libusb-1.0-0-dev libhidapi-dev libftdi1-dev libzip-dev libserialport-dev \
              libglibmm-2.4-dev doxygen
          else
            brew update
            brew install meson ninja pkg-config glib libusb hidapi libftdi libzip libserialport glibmm doxygen
          fi

      - name: Windows deps
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-meson mingw-w64-x86_64-ninja
            mingw-w64-x86_64-cc mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-glib2 mingw-w64-x86_64-libusb
            mingw-w64-x86_64-libftdi mingw-w64-x86_64-hidapi
            mingw-w64-x86_64-libzip mingw-w64-x86_64-libserialport
            mingw-w64-x86_64-glibmm mingw-w64-x86_64-doxygen

      - name: Configure (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: meson setup build -Dbindings_cxx=true

      - name: Configure (Linux/macOS)
        if: runner.os != 'Windows'
        run: meson setup build -Dbindings_cxx=true

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: meson compile -C build

      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        run: meson compile -C build

      - name: Test (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: meson test -C build --print-errorlogs

      - name: Test (Linux/macOS)
        if: runner.os != 'Windows'
        run: meson test -C build --print-errorlogs

      - name: Install (Linux/macOS)
        if: runner.os != 'Windows' && startsWith(github.ref, 'refs/tags/v')
        run: |
          DESTDIR="${PWD}/install" meson install -C build
          # Find the actual install prefix by looking for pkgconfig directory
          PKGCONFIG_DIR=$(find install -type d -name pkgconfig | head -1)
          ACTUAL_PREFIX=$(echo $PKGCONFIG_DIR | sed 's|/lib.*/pkgconfig$||' | sed 's|^install||')
          if [ "$RUNNER_OS" = "macOS" ]; then
            PLATFORM="macos"
          else
            PLATFORM="linux"
          fi
          echo "Creating tarball from install$ACTUAL_PREFIX"
          tar czf opentracecapture-${PLATFORM}.tar.gz -C install$ACTUAL_PREFIX .

      - name: Install (Windows)
        if: runner.os == 'Windows' && startsWith(github.ref, 'refs/tags/v')
        shell: msys2 {0}
        run: |
          DESTDIR="${PWD}/install" meson install -C build
          MINGW_PATH=$(find install -type d -name mingw64 | head -1)
          tar czf opentracecapture-windows.tar.gz -C $MINGW_PATH .

      - name: Upload artifact (Linux)
        if: runner.os == 'Linux' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: opentracecapture-linux
          path: opentracecapture-*.tar.gz

      - name: Upload artifact (macOS)
        if: runner.os == 'macOS' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: opentracecapture-macos
          path: opentracecapture-*.tar.gz

      - name: Upload artifact (Windows)
        if: runner.os == 'Windows' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: opentracecapture-windows
          path: opentracecapture-*.tar.gz

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/opentracecapture-*.tar.gz
          draft: false
          prerelease: true
